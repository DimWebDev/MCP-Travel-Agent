name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
      - 'feature/**'
  pull_request:
    branches:
      - main
      - dev

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: poetry-venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies
        run: |
          poetry install --no-interaction --quiet

      - name: Code Quality Checks
        run: |
          # Black (formatting)
          poetry run black --check --diff .
          # isort (import sorting)
          poetry run isort --check-only --diff .
          # Flake8 (linting)
          poetry run flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # (Optional) Mypy for type checks
          # poetry run mypy app/ --ignore-missing-imports

      - name: Security Scan
        run: |
          # Safety for dependency vulnerabilities
          poetry run safety check
          # Bandit for code-level security issues (exit 0 even if issues found)
          poetry run bandit -r app/ -f json || true

      - name: Run Tests
        run: |
          # Unit & integration tests with coverage
          poetry run pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
          # Import sanity check
          poetry run python - <<'PYCODE'
import app.agent, app.mcp_servers
print("âœ… All imports successful")
PYCODE

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11'
        with:
          files: ./coverage.xml
          fail_ci_if_error: false

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Docker Compose Validate & Build
        run: |
          # Use Docker Compose v2 plugin
          docker compose version
          docker compose config
          docker compose build

      - name: Docker Compose Smoke Test
        run: |
          docker compose up -d
          sleep 10
          docker compose ps
          docker compose down

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "ðŸš€ Deployment placeholder â€“ insert your deployment steps here!"
